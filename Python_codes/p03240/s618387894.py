#!/usr/bin/env python3
import sys

def solve(N: int, X: "List[int]", Y: "List[int]", H: "List[int]"):
    def calc_h(cx, cy):
        h = None
        for xx, yy, hh in filter(lambda xyh: xyh[2]>0, zip(X, Y, H)):
            th = hh + abs(cx - xx) + abs(cy - yy)
            if h is not None and th != h:
                return None
            h = th
        h = h if h else 1
        for xx, yy, _ in filter(lambda xyh: xyh[2]==0, zip(X, Y, H)):
            if abs(cx - xx) + abs(cy - yy) < h:
                return None
        return h

    for cx in range(101):
        for cy in range(101):
            h = calc_h(cx, cy)
            if h is not None:
                return cx, cy, h


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    x = [int()] * (N)  # type: "List[int]"
    y = [int()] * (N)  # type: "List[int]"
    h = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        x[i] = int(next(tokens))
        y[i] = int(next(tokens))
        h[i] = int(next(tokens))
    print(*solve(N, x, y, h))

def test():
    import doctest
    doctest.testmod()

if __name__ == '__main__':
    #test()
    main()
