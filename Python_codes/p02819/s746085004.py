#!/usr/bin/env python3
# Generated by https://github.com/kyuridenamida/atcoder-tools
from typing import *
import collections
import functools
import itertools
import math
import sys

INF = float('inf')


def prime(min=1, max=float('inf')):
    primes = [2]
    if min <= 2 < max:
        yield 2

    def odd(min=1, max=float('inf')):
        counter = min + (min % 2 == 0)
        while counter < max:
            yield counter
            counter += 2

    if max != float('inf'):
        numbers = list(odd(3, max))
        for i in range(len(numbers)):
            if numbers[i] != 0:
                if min <= numbers[i]:
                    yield numbers[i]

                o = odd(3)
                while True:
                    index = numbers[i] * next(o) // 2 - 1
                    if index >= len(numbers):
                        break
                    numbers[index] = 0

    else:
        for o in odd(3, max):
            for p in primes:
                if o % p == 0:
                    break
            else:
                primes.append(o)
                if min <= o:
                    yield o
                if max < o:
                    break


def solve(X: int):
    return next(prime(X, int(1e5) + 5))


def main():

    sys.setrecursionlimit(10 ** 6)

    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    X = int(next(tokens))  # type: int
    print(f'{solve(X)}')


if __name__ == '__main__':
    main()
