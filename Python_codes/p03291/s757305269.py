#!/usr/bin/env python3
import sys, math, fractions, itertools

MOD = 1000000007  # type: int


def solve(S: str):
    dp = [[0 for _ in range(4)] for _ in range(len(S)+1)]
    for i in reversed(range(len(S)+1)):
        for j in reversed(range(4)):
            if i == len(S) and j == 3:
                dp[i][j] = 1
            if j < 3 and i == len(S):
                dp[i][j] = 0
            if i < len(S):
                if j == 3:
                    if S[i] == '?':
                        m = 3
                    else:
                        m = 1
                    dp[i][3] = m * dp[i+1][3]
                if j < 3:
                    if S[i] == '?':
                        m1 = 3
                    else:
                        m1 = 1
                    if S[i] == '?' or S[i] == list('ABC')[j]:
                        m2 = 1
                    else:
                        m2 = 0
                    dp[i][j] = m1 * dp[i+1][j] + m2 * dp[i+1][j+1]
            dp[i][j] %= MOD
    print(dp[0][0])
    return


# Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    S = next(tokens)  # type: str
    solve(S)

if __name__ == '__main__':
    main()
