#!/usr/bin/env python3
import sys


def solve(H: int, W: int, N: int, a: "List[int]"):
    L = []
    for i, aa in enumerate(a):
        L = L + [i+1] * aa
    R = []
    for i in range(H):
        R.append(L[i*W:(i+1)*W])
    for i in range(H):
        if i % 2 == 0:
            K = R[i]
        else:
            K = list(reversed(R[i]))
        print(" ".join([str(s) for s in K]))
    return


# Generated by 1.1.5 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    H = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    N = int(next(tokens))  # type: int
    a = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(H, W, N, a)

if __name__ == '__main__':
    main()
