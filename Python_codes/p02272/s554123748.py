# -*- coding:utf-8 -*-
# AIZU ONLINE JUDGE
# Introduction to Algorithms and Data Structures
# ALDS1_5_B
# Recursion / Divide and Conquer - Merge Sort

# ?????????????????????????????±??????????????\??????????????¢?????´????????????
# ????????±??????(Divide and Conquer method)?????????????????§????§£?±???§???????????§????????????????°????????????????????????????????????¨???????§£?±????????????¨??§?????????????????????????????¨???????§£?±?????????¨?????????????§£?±???????????????¨???
# ?????????????????´??????????????????????????????????????????????????°????????´???????????????????????????????????????????????¨????????£?????´?????????

# Input
# A     : ??´??????????????????
# left  : ??????????????????????????????????????????????????????
# mid   : right??¨mid???????????????????¬?????????§???????????????
# right : ??????????????????????????????????????????????????????

cnt = 0
def marge(A, left, mid, right):
    global cnt
    # ??????????????????????????????????????????
    n1 = mid-left
    n2 = right-mid

    # L[0..n1],R[0..n2]?????????
    l = []
    r = []
    for i in xrange(n1):
        l.append(A[left+i])
    for i in xrange(n2):
        r.append(A[mid+i])
    l.append(float('inf'))
    r.append(float('inf'))
    i = 0
    j = 0
    for k in xrange(left,right):
        cnt += 1
        if l[i]<=r[j]:
            A[k] = l[i]
            i+=1
        else:
            A[k] = r[j]
            j+=1

def marge_sort(A,left,right):
    if left+1<right:
        mid = (right+left)/2
        marge_sort(A, left,mid)
        marge_sort(A, mid,right)
        marge(A,left,mid,right)

def main():
    n = input()
    A = map(int,raw_input().split())
    marge_sort(A,0,len(A))
    print " ".join(map(str,A))
    print cnt

if __name__ == '__main__':
    main()