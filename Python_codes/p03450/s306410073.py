#!/usr/bin/env python3
import sys
from collections import deque

YES = "Yes"  # type: str
NO = "No"  # type: str

def solve(N: int, M: int, L: "List[int]", R: "List[int]", D: "List[int]"):
    dist = [[] for _ in range(N+1)]
    value = [None for _ in range(N+1)] ## value[i] i+1の値

    ## あるノードとつながっている「ノードと距離」を入れていく
    for i in range(M):
        dist[L[i]].append((R[i],D[i]))
        dist[R[i]].append((L[i],-D[i]))

    def BFS(queue):
        while queue:
            q = queue.popleft()
            q_value = value[q]

            for node_number, distance in dist[q]:
                if value[node_number] == None:
                    value[node_number] = q_value+distance
                    queue.append(node_number)
                else:
                    if value[node_number] == q_value+distance:
                        continue
                    else: ##矛盾してるからあうと
                        print(NO)
                        sys.exit()
    
    for index, v in enumerate(value):
        if index == 0:
            continue
        if v == None and dist[index]: 
            value[index] = 0
            BFS(deque([index]))

    print(YES)
    return


# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    L = [int()] * (M)  # type: "List[int]"
    R = [int()] * (M)  # type: "List[int]"
    D = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        L[i] = int(next(tokens))
        R[i] = int(next(tokens))
        D[i] = int(next(tokens))
    solve(N, M, L, R, D)

if __name__ == '__main__':
    main()
