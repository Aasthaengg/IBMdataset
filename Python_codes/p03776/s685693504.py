#!/usr/bin/env python3
import sys

f = [1]
for i in range(1, 51):
    f.append(f[-1] * i)

def comb(n, k):
    a = f[n]
    b = f[n-k]
    c = f[k]
    bc = b * c
    return a // bc

def solve(N: int, A: int, B: int, v: "List[int]"):
    v = sorted(v, reverse=True)
    print("%.6f" % (sum(v[:A])/A))

    if v[0] != v[A]:
        ret = comb(v.count(v[A-1]), v[:A].count(v[A-1]))
        print(ret)
    else:
        s = 0
        X = v.count(v[0])
        for i in range(A, B+1):
            s += comb(X, i)
        print(s)
    return


# Generated by 1.1.5 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = int(next(tokens))  # type: int
    B = int(next(tokens))  # type: int
    v = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, A, B, v)

if __name__ == '__main__':
    main()
