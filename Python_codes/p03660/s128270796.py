#!/usr/bin/env python3
import sys
from dataclasses import dataclass

def solve(N: int, a: "List[int]", b: "List[int]"):
    from collections import defaultdict, deque
    edges = defaultdict(list)
    for aa, bb in zip(a, b):
        edges[aa].append(bb)
        edges[bb].append(aa)
    def f():
        visited = [None] * (N+1)
        que = deque([("f", 1), ("s", N)])
        while que:
            name, node = que.popleft()
            if visited[node]:
                continue
            visited[node] = name
            for n in edges[node]:
                if visited[n]:
                    continue
                que.append((name, n))
        return sum("f" == v for v in visited)
    return "Fennec" if f() > N // 2 else "Snuke"
            


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    a = [int()] * (N - 1)  # type: "List[int]"
    b = [int()] * (N - 1)  # type: "List[int]"
    for i in range(N - 1):
        a[i] = int(next(tokens))
        b[i] = int(next(tokens))
    print(solve(N, a, b))

def test():
    import doctest
    doctest.testmod()

if __name__ == '__main__':
    #test()
    main()
