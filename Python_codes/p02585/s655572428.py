# compiled by pythran
"""
#pythran export main2()
import numpy as np
i4 = np.int32
i8 = np.int64


def solve_core(a, n, u):
    cs = np.empty(n + u, i8)
    cs[0] = a[0]
    for i in range(1, n + u):
        cs[i] = cs[i - 1] + a[i]
    base = 0
    max_index = -1
    res = -1000000000
    for i in range(n):
        if max_index < i:
            max_value = -10000000000000
            max_index = i
            for j in range(i, i + u):
                if cs[j] >= max_value:
                    max_value = cs[j]
                    max_index = j
        else:
            if max_value <= cs[i + u - 1]:
                max_value = cs[i + u - 1]
                max_index = i + u - 1
        res = max(res, max_value - base)
        base = cs[i]
    return res


def solve(n, k, p, c):
    mark = np.zeros_like(p)
    cwork = np.empty(n * 2, i8)

    ans = -1000000000
    for i in range(n):
        if mark[i] == 1:
            continue

        cwork[0] = c[i]
        mark[i] = 1
        m = 1
        j = p[i]
        while j != i:
            cwork[m] = c[j]
            mark[j] = 1
            m += 1
            j = p[j]

        cwork[m: 2 * m] = cwork[: m]
        if k <= m:
            res = solve_core(cwork, m, k)
        else:
            t = np.sum(cwork[: m])
            if t > 0:
                r = k // m
                s = k % m
                res = t * (r - 1) + solve_core(cwork, m, m)
                if s > 0:
                    res2 = t * r + solve_core(cwork, m, s)
                    res = max(res, res2)
            else:
                res = solve_core(cwork, m, m - 1)
        ans = max(ans, res)
    return ans


def main(file_in):
    f = open(file_in)
    n, k = [int(x) for x in f.readline().split()]
    p = np.array([int(x) - 1 for x in f.readline().split()])
    c = np.array([int(x) for x in f.readline().split()])
    ans = solve(n, k, p, c)
    return ans


def main2():
    ans = main('/dev/stdin')
    print(ans)
"""
import os, sys
p = os.path.dirname(__file__)
pymain = os.path.join(p, "a.out")
if len(sys.argv) == 1:
    import subprocess
    if p == "":
        pymain = "./" + pymain
    subprocess.call(pymain)
else:
    import gzip, base64, stat
    gz = b''
    bin = gzip.decompress(base64.b64decode(gz))
    with open(pymain, "wb") as f:
        f.write(bin)
    os.chmod(pymain, 0o775)
