#!/usr/bin/env python3
import sys


def warshall_floyd(A):
    #d[i][j]: iからjへの最短距離
    l = len(A)
    for k in range(l):
        for i in range(l):
            for j in range(l):
                A[i][j] = min(A[i][j], A[i][k] + A[k][j])
    return A


def solve(H: int, W: int, c: "List[List[int]]", A: "List[List[int]]"):
    c = warshall_floyd(c)
    cost = 0
    for h in range(H):
        for w in range(W):
            if A[h][w] != -1:
                cost += c[A[h][w]][1]
    print(cost)
    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    H = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    c = [[int(next(tokens)) for _ in range(9 - 0 + 1)] for _ in range(9 - 0 + 1)]  # type: "List[List[int]]"
    A = [[int(next(tokens)) for _ in range(W)] for _ in range(H)]  # type: "List[List[int]]"
    solve(H, W, c, A)

if __name__ == '__main__':
    main()
