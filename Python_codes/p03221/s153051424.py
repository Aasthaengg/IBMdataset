#!/usr/bin/env python3
import sys


def solve(N: int, M: int, P: "List[int]", Y: "List[int]"):
    tuple = list(zip(P, Y, [i for i in range(M)]))
    tuple.sort()
    numbers = [0 for _ in range(M)]
    index = 0
    pre = tuple[0][0]
    for t in tuple:
        if pre != t[0]:
            pre = t[0]
            index = 0
        index += 1
        numbers[t[2]] = f"{str(t[0]).zfill(6)}{str(index).zfill(6)}"
    for n in numbers:
        print(n)
    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    P = [int()] * (M)  # type: "List[int]"
    Y = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        P[i] = int(next(tokens))
        Y[i] = int(next(tokens))
    solve(N, M, P, Y)

if __name__ == '__main__':
    main()

