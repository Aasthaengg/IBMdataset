N,K = map(int,input().split())
A = list(map(int,input().split()))

# dp[i][j]
# 上からi桁目まで見たとき、
# j=0:XがK未満であることが未確定である場合の、f(X)の最大値
# j=1:XがK未満であることが確定である場合の、f(X)の最大値
#
# XがK未満であることが確定->確定の遷移
#  Xiは0でも1でも可なので、Aiの0と1の個数のうち多い方を足せばよい。
# XがK未満であることが未確定->確定の遷移
#  Kiが1でXiを0としたとき、未確定->確定となる。
#  Xiを0にするということは、Aiの1の個数を足すことになる。
# XがK未満であることが未確定->未確定の遷移
#  (1)Kiが1でXiを1としたとき(2)Kiが0でXiを0としたときの2パターンがある。
#  (1)の場合はAiの0の個数、(2)の場合はAiの1の個数を足すことになる。

MAX_DIGIT = 42
dp = [[-1 for _ in range(2)] for _ in range(MAX_DIGIT+1)]
dp[MAX_DIGIT][0] = 0
for i in range(MAX_DIGIT-1,-1,-1):
  c0 = c1 = 0
  for a in A:
    if (a>>i)&1 == 1:
      c1 += 1
    else:
      c0 += 1
  if dp[i+1][1] >= 0:
    # 確定->確定
    dp[i][1] = dp[i+1][1] + max((c1<<i),(c0<<i))
  if dp[i+1][0] >= 0:
    if (K>>i)&1 == 1:
      # 未確定->未確定でKi=1&Xi=1
      dp[i][0] = dp[i+1][0] + (c0<<i)
      # 未確定->確定(つまりKi=1&Xi=0) 
      dp[i][1] = max(dp[i][1], dp[i+1][0] + (c1<<i))
    else:
      # 未確定->未確定でKi=0&Xi=0
      dp[i][0] = dp[i+1][0] + (c1<<i)
# dp[0][0]:最後まで XがK未満であることが未確定、つまりK=Xの場合の最大値
# dp[0][1]:XがK未満である場合の最大値
print(max(dp[0][0],dp[0][1]))
#print(dp)
