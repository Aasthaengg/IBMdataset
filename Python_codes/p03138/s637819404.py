#!/usr/bin/env python3
import sys

def solve(N: int, K: int, A: "List[int]"):
    ans = 0
    max_bit = 40
    for i in range(max_bit+1):
        t = 2**(max_bit-i)
        count = len([1 for a in A if a&t > 0])
        if t <= K and count < N / 2:
            count = N - count
            K -= t
        ans += count * t
    print(ans)
# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, K, A)

if __name__ == '__main__':
    main()
