#!/usr/bin/env python3
import sys, math, fractions, itertools, heapq

def solve(N: int, k: int, t: "List[int]", d: "List[int]"):
    arr = sorted(zip(t, d), key=lambda x: x[1], reverse=True)
    q = [] # ヒープ
    v = set() # ネタの種類
    s = 0 # 美味しさの合計
    for t,d in arr[:k]:
        s += d
        if t in v:
            heapq.heappush(q,d)
        else:
            v.add(t)
    s += len(v)**2
    ans = s # arr[:k]での点数
    for t,d in arr[k:]: # 使っていない寿司について考える
        if t not in v and len(q)!=0: # 新規のネタのとき
            z = heapq.heappop(q) # 最小値を一つ捨てる
            s += d + 2*len(v) + 1 - z # 差分を計算する
            v.add(t)
            ans=max(ans,s) #結果として大きかった方を取る
    print(ans)
    return


# Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    t = [int()] * (N)  # type: "List[int]" 
    d = [int()] * (N)  # type: "List[int]" 
    for i in range(N):
        t[i] = int(next(tokens))
        d[i] = int(next(tokens))
    solve(N, K, t, d)

if __name__ == '__main__':
    main()
