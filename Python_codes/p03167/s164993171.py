#!/usr/bin/env python3
import sys

MOD = 1000000007  # type: int


def solve(H: int, W: int, a: "List[List[str]]"):

    dp = []
    for _ in range(0, H):
        L = [0]*W
        dp.append(L)
    
    # initialize
    for i in range(0, H):
        if a[i][0][0] == "#": 
            break
        dp[i][0] = 1
    for j in range(0, W):
        if a[0][0][j] == "#":
            break
        dp[0][j] = 1

    for i in range(1, H):
        for j in range(1, W):
            if a[i][0][j] == ".":
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]

    print(dp[H - 1][W - 1] % MOD)
            
    return


# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    H = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    a = [[next(tokens) for _ in range(1)] for _ in range(H)]  # type: "List[List[str]]"
    solve(H, W, a)

if __name__ == '__main__':
    main()
