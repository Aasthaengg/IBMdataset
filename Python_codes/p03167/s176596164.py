#!/usr/bin/env python3
import sys

MOD = 1000000007  # type: int


def solve(H: int, W: int, a: "List[List[str]]"):
    dp = [[0] * W for _ in range(H)]
    dp[0][0] = 1
    for h in range(H):
        for w in range(W):
            if h == 0 and w == 0:
                dp[h][w] = 1
            elif h == 0:
                if a[h][0][w-1] == ".":
                    dp[h][w] = dp[h][w-1]
            elif w == 0:
                if a[h-1][0][w] == ".":
                    dp[h][w] = dp[h-1][w]
            else:
                if a[h-1][0][w] == "." and a[h][0][w-1] == ".":
                    dp[h][w] = (dp[h-1][w] + dp[h][w-1]) % MOD
                elif a[h-1][0][w] == ".":
                    dp[h][w] = dp[h-1][w]
                elif a[h][0][w-1] == ".":
                    dp[h][w] = dp[h][w-1]
    print(dp[-1][-1])
    return


# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    H = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    a = [[next(tokens) for _ in range(1)]
         for _ in range(H)]  # type: "List[List[str]]"
    solve(H, W, a)


if __name__ == '__main__':
    main()
