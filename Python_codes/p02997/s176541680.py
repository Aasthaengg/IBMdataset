#!/usr/bin/env python3
import sys
from itertools import combinations


def make_deletables(n):
    return list(combinations(range(1, n), 2))


def delete_2len(edges, n, n_delete):
    candidates = make_deletables(n)
    for k, v in candidates[:n_delete]:
        edges[k].append(v)
    return edges


def make_ball(n):
    return {i: [n] for i in range(1, n)}


def is_possible(n, k):
    return k <= ((n - 1) * (n - 2) // 2)


def calc_n_delete(n, k):
    return ((n - 1) * (n - 2) // 2) - k


def list_dict_to_tpls(dic):
    tpls = []
    for k, lis in dic.items():
        tpls += [(k, l) for l in lis]
    return tpls


def solve(N: int, K: int):
    if not is_possible(N, K):
        print(-1)
        return
    edges_dict = make_ball(N)
    n_delete = calc_n_delete(N, K)
    edges_dict = delete_2len(edges_dict, N, n_delete)
    edges_tpls = list_dict_to_tpls(edges_dict) 
    print(len(edges_tpls))
    for i, j in edges_tpls:
        print(i, j)
    return


# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    solve(N, K)

if __name__ == '__main__':
    main()
